// Crear un usuario
export const createUsuario = async (req, res) => {
    console.log(req.body);
    const pool = await getConnection();

    const rol = req.body.rol || 'usuario';
    const estado = req.body.estado || 1;

    try {
        // Verificar si el nombre de usuario ya existe
        const existingUser = await pool
            .request()
            .input('username', sql.VarChar, req.body.username)
            .query("SELECT COUNT(*) AS count FROM USUARIO WHERE username = @username");

        if (existingUser.recordset[0].count > 0) {
            return res.status(400).json({ message: 'El username ya está en uso' });
        }

        // Verificar si el correo ya existe (opcional)
        const existingEmail = await pool
            .request()
            .input('email', sql.VarChar, req.body.email) // Si tienes un campo de correo
            .query("SELECT COUNT(*) AS count FROM USUARIO WHERE email = @email");

        if (existingEmail.recordset[0].count > 0) {
            return res.status(400).json({ message: 'El correo ya está en uso' });
        }

        // Si no existe, proceder a crear el nuevo usuario
        const result = await pool
            .request()
            .input('firebase_id', sql.VarChar, req.body.firebase_id)
            .input('username', sql.VarChar, req.body.username)
            .input('rol', sql.VarChar, rol)
            .input('estado', sql.Int, estado)
            .query(
                "INSERT INTO USUARIO (firebase_id, username, rol, estado, fecha_registro) VALUES (@firebase_id, @username, @rol, @estado, GETDATE()); SELECT SCOPE_IDENTITY() AS id;"
            );

        console.log(result);

        res.status(201).json({
            id: result.recordset[0].id,
            firebase_id: req.body.firebase_id,
            username: req.body.username,
            rol: rol,
            estado: estado
        });
    } catch (error) {
        console.error('Error al crear el usuario:', error);
        res.status(500).json({ message: 'Error al crear el usuario' });
    }
};
